{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":50160,"databundleVersionId":7921029,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import polars as pl # data processing, Parquet file I/O (e.g. pl.read_parquet)\nimport pandas as pd\n\ndataPath = \"/kaggle/input/home-credit-credit-risk-model-stability/\"\n\ndataPathTrain = \"/kaggle/input/home-credit-credit-risk-model-stability/parquet_files/train/\"\ndataPathTest = \"/kaggle/input/home-credit-credit-risk-model-stability/parquet_files/test/\"","metadata":{"_uuid":"5e96a354-dbee-49ee-a135-3d301d3061cb","_cell_guid":"522560cb-da04-4215-a1c4-551dcc286d69","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T14:00:48.314805Z","iopub.execute_input":"2024-04-15T14:00:48.315793Z","iopub.status.idle":"2024-04-15T14:00:48.321055Z","shell.execute_reply.started":"2024-04-15T14:00:48.315751Z","shell.execute_reply":"2024-04-15T14:00:48.320176Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## TODO\n\n1. [ ] import dataset with polars\n2. [ ] data preprocessing\n3. [ ] data processing into tensors for pytorch","metadata":{"_uuid":"7c5a866d-caa5-4e6b-b558-74716d307c3b","_cell_guid":"676e1b9e-c0c3-446f-a4c5-09f4f6b341ba","trusted":true}},{"cell_type":"code","source":"def set_table_dtypes(df: pl.DataFrame) -> pl.DataFrame:\n    # implement here all desired dtypes for tables\n    # the following is just an example\n    for col in df.columns:\n        # last letter of column name will help you determine the type\n        if col[-1] in (\"P\", \"A\"):\n            df = df.with_columns(pl.col(col).cast(pl.Float64).alias(col))\n\n    return df\n\ndef convert_strings(df: pd.DataFrame) -> pd.DataFrame:\n    for col in df.columns:  \n        if df[col].dtype.name in ['object', 'string']:\n            df[col] = df[col].astype(\"string\").astype('category')\n            current_categories = df[col].cat.categories\n            new_categories = current_categories.to_list() + [\"Unknown\"]\n            new_dtype = pd.CategoricalDtype(categories=new_categories, ordered=True)\n            df[col] = df[col].astype(new_dtype)\n    return df","metadata":{"_uuid":"c3787f35-4501-4839-87a9-520ecfbb6a99","_cell_guid":"57185850-a732-4ce6-8a34-4133e896872e","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T14:00:51.032499Z","iopub.execute_input":"2024-04-15T14:00:51.033669Z","iopub.status.idle":"2024-04-15T14:00:51.043364Z","shell.execute_reply.started":"2024-04-15T14:00:51.033619Z","shell.execute_reply":"2024-04-15T14:00:51.042053Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Import data with Polars\n\nFirst step is to create a `train` and `test` combining different parquet file together.","metadata":{"_uuid":"8350fb02-bc8a-4028-90d9-05def809e733","_cell_guid":"d5f0908c-e320-4153-b594-e758bb34ce43","trusted":true}},{"cell_type":"code","source":"train_basetable = pl.read_csv(dataPath + \"csv_files/train/train_base.csv\")\ntrain_static = pl.concat(\n    [\n        pl.read_csv(dataPath + \"csv_files/train/train_static_0_0.csv\").pipe(set_table_dtypes),\n        pl.read_csv(dataPath + \"csv_files/train/train_static_0_1.csv\").pipe(set_table_dtypes),\n    ],\n    how=\"vertical_relaxed\",\n)\ntrain_static_cb = pl.read_csv(dataPath + \"csv_files/train/train_static_cb_0.csv\").pipe(set_table_dtypes)\ntrain_person_1 = pl.read_csv(dataPath + \"csv_files/train/train_person_1.csv\").pipe(set_table_dtypes) \ntrain_credit_bureau_b_2 = pl.read_csv(dataPath + \"csv_files/train/train_credit_bureau_b_2.csv\").pipe(set_table_dtypes)","metadata":{"_uuid":"05f9d01f-ed47-42ee-ace5-9843fcb2871b","_cell_guid":"0f871f6a-6c02-42f5-a780-97fc488d9222","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T14:00:53.166472Z","iopub.execute_input":"2024-04-15T14:00:53.167316Z","iopub.status.idle":"2024-04-15T14:01:14.866012Z","shell.execute_reply.started":"2024-04-15T14:00:53.167276Z","shell.execute_reply":"2024-04-15T14:01:14.865062Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#train = pl.read_parquet(dataPathTrain + \"train_base.parquet\")              # read train base\nstatic_0 = pl.read_parquet(dataPathTrain + \"train_static_0_0.parquet\")     # read train static_0_0\nstatic_1 = pl.read_parquet(dataPathTrain + \"train_static_0_1.parquet\")     # read train static_0_1\nstatic = pl.concat([static_0, static_1])                                   # concatanate static_0_0 + static_0_1 to get\n                                                                           # the same size as train base\nstatic_cb_0 = pl.read_parquet(dataPathTrain + \"train_static_cb_0.parquet\") # read static_cb_0\ntrain = train.join(static, on = \"case_id\", how = \"inner\")                  # inner join of base ans static\ntrain = train.join(static_cb_0, on = \"case_id\", how = \"inner\")             # inner join with newly train and static_cb_0\n#person_1 = pl.read_parquet(dataPathTrain + \"train_person_1.parquet\")       # read person_1\n#train = train.join(person_1, on = \"case_id\", how = \"inner\")\n#person_2 = pl.read_parquet(dataPathTrain + \"train_person_2.parquet\")       # read person_2\n#train = train.join(person_2, on = \"case_id\", how = \"inner\")\ntrain","metadata":{"_uuid":"9e43aedf-0d39-4dd2-8737-c5da109ee8ed","_cell_guid":"b20d1b9f-019f-48b7-9881-b55c7266e0c3","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T13:27:23.747479Z","iopub.execute_input":"2024-04-15T13:27:23.747996Z","iopub.status.idle":"2024-04-15T13:27:32.426446Z","shell.execute_reply.started":"2024-04-15T13:27:23.747944Z","shell.execute_reply":"2024-04-15T13:27:32.425162Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.dtypes","metadata":{"_uuid":"f1523edb-1fa4-41b0-a702-79f909e65232","_cell_guid":"726ee241-7ebf-4a8e-ac45-7899bbfeee80","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T13:35:37.341846Z","iopub.execute_input":"2024-04-15T13:35:37.343245Z","iopub.status.idle":"2024-04-15T13:35:37.362431Z","shell.execute_reply.started":"2024-04-15T13:35:37.343193Z","shell.execute_reply":"2024-04-15T13:35:37.361096Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.n_unique\n#https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.n_unique.html#polars-dataframe-n-unique","metadata":{"_uuid":"df11a24b-0d42-4df5-98b0-77b1e1a22c5a","_cell_guid":"3012953e-b485-4287-8111-00e65b16f6f7","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T13:37:21.262689Z","iopub.execute_input":"2024-04-15T13:37:21.263175Z","iopub.status.idle":"2024-04-15T13:37:21.276542Z","shell.execute_reply.started":"2024-04-15T13:37:21.263141Z","shell.execute_reply":"2024-04-15T13:37:21.274948Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test = pl.read_parquet(dataPathTest + \"test_base.parquet\")              # read train base\nstatic_0 = pl.read_parquet(dataPathTest + \"test_static_0_0.parquet\")     # read train static_0_0\nstatic_1 = pl.read_parquet(dataPathTest + \"test_static_0_1.parquet\")     # read train static_0_1\nstatic = pl.concat([static_0, static_1])                                   # concatanate static_0_0 + static_0_1 to get\n                                                                           # the same size as train base\nstatic_cb_0 = pl.read_parquet(dataPathTest + \"test_static_cb_0.parquet\") # read static_cb_0\ntest = test.join(static, on = \"case_id\", how = \"inner\")                  # inner join of base ans static\ntest = test.join(static_cb_0, on = \"case_id\", how = \"inner\")\ntest","metadata":{"_uuid":"71019b96-9e3c-4111-b58c-2370852b09f1","_cell_guid":"228f104c-49ba-4d0c-8191-02a249ac8a5b","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T13:30:14.101634Z","iopub.execute_input":"2024-04-15T13:30:14.102375Z","iopub.status.idle":"2024-04-15T13:30:14.178379Z","shell.execute_reply.started":"2024-04-15T13:30:14.102338Z","shell.execute_reply":"2024-04-15T13:30:14.176894Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Data preprocessing for pytorch\n\n### bool\n\nSélectioner les colonnes d'un dataframe polars selon le type de données : `String`","metadata":{"_uuid":"694168b8-91ee-4135-a7ef-0d14c7a3da3a","_cell_guid":"bcd8214a-7ebd-42ee-9cbb-ef52616d8bcd","trusted":true}},{"cell_type":"code","source":"train_preprop = train\ntrain_preprop                       # 1.500.476 // 224","metadata":{"_uuid":"957bb48d-51a9-4a0c-ba16-7aa8006d8638","_cell_guid":"b78c420f-875f-4b24-87fb-7aa189c54b75","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T13:53:29.581060Z","iopub.execute_input":"2024-04-15T13:53:29.582647Z","iopub.status.idle":"2024-04-15T13:53:29.612936Z","shell.execute_reply.started":"2024-04-15T13:53:29.582583Z","shell.execute_reply":"2024-04-15T13:53:29.612064Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Find all boolean columns and tranform them\ntrain_preprop = train_preprop.pl.col(pl.Boolean)\ntrain_preprop","metadata":{"_uuid":"908da752-4464-4129-a0e4-7dabe094b494","_cell_guid":"6ac3e989-0c16-4d1c-bc0f-5f8c9c9cb524","collapsed":false,"execution":{"iopub.status.busy":"2024-04-15T13:51:56.031708Z","iopub.execute_input":"2024-04-15T13:51:56.033037Z","iopub.status.idle":"2024-04-15T13:51:56.067714Z","shell.execute_reply.started":"2024-04-15T13:51:56.032964Z","shell.execute_reply":"2024-04-15T13:51:56.066030Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Check the number of unique values per categorical column\nprint(f\"Number of unique values per categorical column: \\n\")\n\nfor column in train_basetable.select_dtypes(include='object'):\n    print(f\"{column}: {preprocessed_df[column].nunique()}\")","metadata":{"_uuid":"1a5c9686-a77e-40e7-87d3-dc41dad89117","_cell_guid":"be3e5cf8-6777-498c-9c16-8c20542cf3be","collapsed":false,"execution":{"iopub.status.busy":"2024-04-12T09:10:35.222913Z","iopub.execute_input":"2024-04-12T09:10:35.223368Z","iopub.status.idle":"2024-04-12T09:10:35.260539Z","shell.execute_reply.started":"2024-04-12T09:10:35.223329Z","shell.execute_reply":"2024-04-12T09:10:35.258959Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_basetable = pl.read_parquet(dataPathTrain + \"train_base.parquet\")\ntrain_static = pl.concat([pl.read_parquet(dataPathTrain + \"train_static_0_0.parquet\").pipe(set_table_dtypes),\n                          pl.read_parquet(dataPathTrain + \"train_static_0_1.parquet\").pipe(set_table_dtypes),],\n                          how=\"vertical_relaxed\")\ntrain_static_cb = pl.read_parquet(dataPathTrain + \"train_static_cb_0.parquet\").pipe(set_table_dtypes)\ntrain_person_1 = pl.read_parquet(dataPathTrain + \"train_person_1.parquet\").pipe(set_table_dtypes) \ntrain_credit_bureau_b_2 = pl.read_parquet(dataPathTrain + \"train_credit_bureau_b_2.parquet\").pipe(set_table_dtypes)","metadata":{"_uuid":"52bd2284-284f-4d5b-a93c-29098bd8c947","_cell_guid":"652dcda2-36cb-4910-8bb8-62c5126d1261","collapsed":false,"execution":{"iopub.status.busy":"2024-04-12T09:01:33.317037Z","iopub.execute_input":"2024-04-12T09:01:33.317492Z","iopub.status.idle":"2024-04-12T09:01:35.905659Z","shell.execute_reply.started":"2024-04-12T09:01:33.317458Z","shell.execute_reply":"2024-04-12T09:01:35.903985Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}